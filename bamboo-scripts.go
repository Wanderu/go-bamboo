// Code generated by go-bindata.
// sources:
// ../../../../../bamboo-scripts/ack.lua
// ../../../../../bamboo-scripts/consume.lua
// ../../../../../bamboo-scripts/enqueue.lua
// ../../../../../bamboo-scripts/fail.lua
// ../../../../../bamboo-scripts/test.lua
// DO NOT EDIT!

package bamboo

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bambooScriptsAckLua = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x55\x61\x6f\xda\x30\x10\xfd\xee\x5f\x71\xf2\x3e\x94\x4a\x90\xad\x5f\x19\x54\x6a\x4b\xc4\x68\x3b\xd8\xc2\x56\xb4\x55\x15\x0a\xc9\x05\xb2\x06\x9b\xd9\x4e\x59\xff\xfd\xce\x76\x02\xa1\x42\xd5\xba\x48\x28\xc9\xc5\xf7\xee\xf9\xbd\x3b\xd3\xe9\xdc\xdf\x33\x16\x27\x8f\xbf\xe4\x02\x7a\x42\x9f\x43\x1b\x7a\xf4\x9c\xa7\xe7\x8c\x09\xdd\x85\x71\xbc\x46\xbd\x89\x13\x84\x52\xa4\xa8\x60\xbb\xca\x93\x15\xfc\x2e\xb1\x44\x48\x63\x13\x03\xfe\xc9\xb5\xd1\x01\x73\x49\x5d\xb8\x26\x9c\x3c\x45\x61\xf2\x2c\x47\x15\x30\x16\x2a\x25\x15\x28\x34\xa5\x12\xa0\x8d\xca\xc5\x52\x77\x19\x03\xba\xbe\x8f\x6f\xc6\x93\xd9\x78\x7e\x3d\xb9\x9c\x8f\x06\x8c\x75\x3a\x0f\x0f\x8c\x15\x32\x89\x0b\xc8\x04\x15\x86\x3e\x70\xe2\xc6\xab\x98\xc6\x8d\x8d\x74\x79\xbd\xa8\x90\xcb\xf9\x36\x26\xdc\x3e\x64\xa5\x48\x4c\x2e\x05\xb4\x88\xaf\x8e\x97\x78\xea\x4a\x28\x4c\x73\x1d\xd0\xba\x96\x7f\xba\x9d\x0c\xe7\xb3\x8b\x68\x3c\x1a\x0f\xdb\xc0\x7b\x1c\x82\xa0\x2a\x45\x0f\xfc\xdc\xbd\x73\x70\xb7\x1d\x0e\x8a\xb4\x59\xf0\x09\xd5\x42\x6a\x7c\x5b\xcd\xbb\x30\xba\x9c\x4c\xc3\xff\xa9\x99\xeb\x39\x3a\x0d\xf7\x05\x09\x58\x97\x85\xa9\xcb\x39\x69\xcd\xf3\x06\xeb\x38\xf4\xfb\x70\x62\xe2\x45\x81\x27\x10\x8b\x14\x7c\x38\x20\x98\x26\xb0\xd0\x04\x79\x13\xfe\x98\xde\x9f\x3d\x54\x21\x67\x22\x45\x2f\xa2\xe1\x9d\x8d\x56\xe1\xc7\xad\x54\x8f\x64\x1c\x7d\xa1\x24\xe2\x69\x9d\xb0\xac\x67\x93\xe8\x86\xa4\xe4\x00\x9d\x8e\xb5\x5e\x83\x59\xc5\x06\x56\xf1\x13\xc2\x02\x51\x40\x22\x85\x2e\xd7\x98\x36\x81\x50\xe9\xa3\x40\x61\x34\xf5\x40\x33\xb7\x08\x46\x03\x5d\x13\xf0\x1b\xa0\x2c\xaf\xe8\x86\x62\x45\x8b\xff\x9c\x5e\x4d\xa2\x90\xb7\x77\xfc\xda\x7e\x03\xa7\x8c\xe5\xd9\x2e\x87\x4a\xe5\x05\x90\x7e\xb5\x90\x3b\x95\xcc\x0a\x85\x93\xb0\xee\xa3\x16\xff\xa2\xe4\x13\xb5\x6f\x6a\x81\x40\x48\x03\x99\xa4\xbe\x0f\x5c\x5b\x8f\x06\x5d\xef\x92\x57\xc9\xd2\xfe\x6a\xe7\xa0\x8a\xd6\x24\x0e\x5c\xf1\x7c\x5d\xd9\xb9\xc2\x4d\xf1\xdc\xe2\x87\x5d\xcf\x0f\xbc\x76\x63\xf8\x52\x1b\x5a\x38\xe5\x8d\x80\x2b\x6f\xa7\x05\xde\x1d\xbd\xec\x97\x08\xd7\x92\x3c\xb0\x70\x99\x92\x6b\xa8\x0d\x74\x83\xfb\x4a\xaa\xe7\x5b\xc9\x1b\x85\x9f\x8f\x8a\xfb\xe6\xca\xa8\x4e\x34\xb1\x37\xaf\x64\xfa\xfd\x27\x45\x4e\x47\xc7\xbc\x9a\xfd\x26\x99\x4f\xc3\xf0\x9b\x25\x43\xb8\x34\x44\x72\x2b\x50\x91\x74\x64\xf3\x41\x0a\x9d\x0e\xdc\x5a\xfd\x22\x98\xc5\x05\x0d\xec\x11\xbb\xc7\xb2\xe2\x47\xb5\x96\x74\x8e\x21\x95\x7c\xef\x2c\x27\xe3\x95\xdd\x44\x60\x0d\xa2\xec\x2a\xb1\xd1\xc4\x44\x70\xd7\xce\x7b\x73\x1a\x95\xab\x3e\x38\xd6\xb9\xd3\x86\xb4\xa8\x76\xca\xda\x04\x92\x68\x94\x59\xae\x0a\x21\xa6\x9f\x90\xb0\x96\x74\x97\xa5\xd1\x86\x86\xd9\xba\x48\xcb\x75\x9b\x10\x9d\xd2\xb4\xb4\xde\x84\x13\xdc\xbe\x93\xd6\x20\xb3\x1a\xaf\x62\x19\x34\xf6\x20\x2c\xc4\x0b\x89\xa7\x57\x17\xd1\x60\xcf\xca\xd3\x21\x85\xfd\xda\x5e\x1f\x3e\xec\x25\xdc\x9f\x73\x07\x1b\x12\x44\xab\xa1\x80\x87\xb0\xfd\xed\x7a\xfc\x5f\xfa\xc6\x0e\xda\x80\xfe\x57\x5e\xed\xd1\x63\x92\x0e\xc2\xdb\xaa\x3f\x4e\x3f\x32\x56\x8d\xdf\x19\xfb\x1b\x00\x00\xff\xff\xf5\xda\x4c\xe1\xe1\x06\x00\x00")

func bambooScriptsAckLuaBytes() ([]byte, error) {
	return bindataRead(
		_bambooScriptsAckLua,
		"bamboo-scripts/ack.lua",
	)
}

func bambooScriptsAckLua() (*asset, error) {
	bytes, err := bambooScriptsAckLuaBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bamboo-scripts/ack.lua", size: 1761, mode: os.FileMode(420), modTime: time.Unix(1448244374, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bambooScriptsConsumeLua = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x58\x5f\x73\xda\x48\x12\x7f\xe7\x53\x74\xe9\x1e\x0c\x55\x44\x49\xf6\xae\xee\xc1\x17\xa7\x8a\x80\xca\x21\xb6\x21\x0b\x76\xbc\x77\xa9\x14\x3b\xa0\x01\x26\x16\x23\x56\x33\x0a\xe6\x3e\xfd\x76\xf7\xcc\x08\x81\x6d\xec\xc4\xb5\xb5\x91\x46\xfd\xf7\xd7\x7f\x87\x57\xaf\xe0\xeb\xd7\x06\xfe\x7f\x96\x6b\x53\xae\x24\x3d\x5e\xc8\xad\x39\x85\x77\xda\xbc\xa7\x37\xd0\xf8\x32\x10\x2b\x69\xd6\x62\x26\xa1\xd4\xa9\x2c\x60\xb3\x54\xb3\x25\xfc\x55\xca\x52\x42\x2a\xac\x00\x79\xaf\x8c\x35\x31\x31\x74\x8a\x05\xb1\xcf\x32\x25\xb5\x9d\x68\xe4\x7c\x0f\xef\x90\x48\x5a\xc5\x8f\xdf\xf3\xe9\x44\xa5\xf8\x20\xef\xd7\xaa\x90\x5e\x4b\x8d\xfc\x14\xae\x97\x12\xe8\xe9\xb5\x4a\x21\x9f\x83\xc5\xd7\x4d\x5e\xdc\xc9\x82\x15\x40\x10\x76\x0a\xdd\xb2\x28\x90\xad\x3a\x01\x61\xe0\x46\xab\x7b\xb8\xb9\xee\x82\x91\xe8\x54\x6a\xc0\x28\x8d\x86\xcb\x75\x3e\x5b\xc6\x30\x92\x7f\x95\xa8\x35\x05\x9b\xc3\x94\xdd\xad\xfd\xad\x85\x31\xf8\x49\x69\x48\xd1\x31\xa4\xc8\xd4\x4a\x59\x61\x15\x82\x43\x86\x5c\x96\xe8\xa9\x5e\x28\x2d\x91\xc6\xa8\x54\xa2\xb8\x54\x39\xb7\xc1\xf9\xe5\x8c\xff\x94\x4f\xa1\xdf\x23\x09\x1e\xd7\x18\x86\x6b\x12\x23\xb2\x18\x7a\x72\x2e\xca\xcc\x1a\xfa\x1c\x45\x31\xf4\xe7\xa0\x73\x0b\x66\x2d\x67\x6a\xae\x64\xba\x67\x14\xf9\xae\xe5\xbd\x85\xa5\x5a\x2c\xa5\xb1\xb0\x2e\x54\x5e\x28\xbb\x25\x7d\xa0\x4c\x50\x90\x3a\x23\x3c\xa6\xa7\x30\xf6\xce\x97\xda\xaa\x8c\xed\xf1\x9f\x40\xe8\x94\xf9\xf0\x5f\x45\xb8\x91\x19\x0b\x04\x43\xcc\xee\x20\xd7\xac\x90\x03\x1b\xef\x83\x83\x56\x46\x51\x1b\xd2\x9a\xf1\xff\x7e\x13\x30\x26\x5a\x22\x1f\x49\x5b\x16\x94\x30\xa4\x90\x12\x83\x0e\x93\xa2\xc8\x0b\x3c\xbb\xea\xfc\xf1\x69\xf8\x61\x3c\x19\x25\x9d\xee\xc7\xa4\xd7\x86\xfe\xe0\x4b\xe7\xb2\xdf\x9b\x74\x2f\xfb\xc9\xe0\x7a\x32\xe8\x5c\x25\x6d\x18\x0c\x27\xfd\xeb\xe4\x6a\xdc\x86\x9b\xc1\xc5\x60\x78\x3b\x98\x20\xd3\xa4\xdf\x23\x49\xdf\xbe\x35\x1a\x59\x3e\x13\x19\xcc\x29\x3d\xe0\x0c\x22\xef\x7e\xe4\xcf\x8d\x5c\xd3\xe9\x69\x14\x08\xb3\x7c\x31\x41\x74\xd5\x8c\xa8\xe7\xa5\x9e\x51\x14\xa0\x89\xe9\x6c\xc4\x42\xb6\x1a\xe4\x5a\xc1\x41\x44\xca\xa6\x7b\xba\x1c\x9e\x4f\x06\xc3\xeb\x7e\x17\xcd\x89\xde\x45\x10\xc7\x5e\x1f\x3e\x44\xef\xf9\x3d\x02\xfe\xa7\x12\x23\x75\x5a\xd7\xb8\x11\x85\xfe\x39\x7d\xb7\x9d\xd1\xa0\x3f\x38\xff\x55\x85\x3f\x64\x31\xcd\xcd\x4f\xfa\xf8\x25\x19\x7d\x18\x8e\x7f\xc9\x49\x65\x26\x92\xc2\x5a\x53\x88\x82\x0d\x66\x46\x50\x47\x89\x00\x76\xbb\x96\xe1\x1c\xce\xce\xe0\xc4\x8a\x69\x26\x4f\x38\x07\xdd\x71\x8c\x62\xea\x82\xb1\xd0\xce\xe0\x22\xf9\xef\xf8\xeb\xdb\x6f\xfe\xe8\xce\xf5\x19\xc0\x0f\xf8\x15\x0d\xa2\x20\x93\x79\xbf\xdf\x24\x37\x49\x2f\xc2\x2f\x98\x1b\x9f\x0b\xb5\x12\xc5\x96\x33\x8f\x19\x02\x37\x75\x0e\xa5\x17\x0f\xb8\x6f\x87\xa3\x0b\x44\x3c\x62\x6e\xe4\xc2\x94\x5e\x0a\xac\x33\xf1\x43\x62\x67\x90\xba\xaa\xac\x20\x68\x25\xee\xbf\x13\xd9\xa1\x20\x9f\xd7\x4e\xd0\x95\xb8\x07\x5d\xae\xa6\xd8\x24\xb1\x61\x30\xbd\xc8\xb2\x7c\xb3\x13\xe3\x3a\xd9\x43\x31\x64\x4f\x32\xf2\x62\x6e\x99\x08\x7b\x88\x09\xc0\xd4\x1a\x24\xb2\x76\x46\xe7\x5f\x76\x08\xa5\xb6\xb4\x33\x9d\x6f\x80\x41\xb2\xb9\x33\xa0\xc9\x44\xbf\x7d\x6b\x79\x2a\xd7\xa0\x5c\x35\x7b\x09\xff\x0c\x12\x42\x73\x78\x4c\xc2\xbf\x50\x82\x9a\x57\x24\x18\xc6\x28\x02\x0c\x7d\xed\x40\x63\x8f\xc1\xc6\xa1\x77\x67\xd4\x1c\x6a\x61\x45\xec\x26\x1e\xbc\x4a\xb8\x4b\xc4\x35\x7e\xce\x9a\xd1\x79\x72\x8d\xdd\x25\x60\xdc\x0a\x36\xeb\xa3\x4c\xff\xeb\x76\x46\x3d\x62\xf3\x31\xae\xd8\x5c\x6e\x35\xa8\x67\xfc\xe3\xd1\x3f\xfa\xd2\xcb\xf5\x89\x0d\x51\x86\x55\x5e\x48\xca\x00\xd7\x01\x57\x0f\xc2\x78\x44\x16\x82\xe3\xec\xa4\xb4\xae\x3c\xa5\x97\xa6\x3b\x7f\x7f\x56\x1d\xb7\x18\xa7\x7a\x8d\x38\x8f\xb8\x9a\x26\x85\x5c\x67\xdb\x66\x74\xd0\x29\x23\x5f\x7a\x47\xbd\xa1\xb1\xe3\x72\x84\x47\x27\xac\x4a\x1c\x16\x53\x1c\x1e\xb9\x7e\x35\xcd\x84\xbe\xe3\x7e\xfe\x81\x9e\x70\x78\xa5\x6a\x86\xad\xdf\xe0\x93\xb2\xca\xe5\x06\x18\x4b\xd3\x60\xa3\xec\x12\x99\x20\xdf\x68\x3f\x6f\x9f\xf6\x7a\x2f\x27\x39\x2d\x2a\xe7\x42\x17\x6c\x46\xdd\x9a\x51\x7b\x73\x2e\x8e\x5a\xcf\xe0\xf0\xc8\x80\x78\x11\x16\x3c\x51\x43\xbe\x57\xfa\xda\x2e\x45\xad\xb8\x93\x1c\xe3\xb9\x2a\x10\x22\x65\xe5\x8a\x26\xfe\xfe\xdc\x43\x09\x22\x08\xd8\xe0\x52\x51\x13\x32\x47\xf4\x5c\xab\xe0\x09\x7c\xc8\xf9\x84\x55\x7e\x3c\xcd\x30\xcb\x08\x39\x2f\xfa\x00\x34\x64\x5f\x4b\x79\x07\x28\xfb\xad\x33\x6c\x5e\xe4\xab\x9d\x02\x0f\x17\xe5\x36\xd6\x84\x03\xcc\x57\xc2\xa8\x33\x38\x4f\xa8\x14\x98\xb0\x0d\x6f\xf8\xbf\x13\x8a\x26\x2b\x35\x27\xad\x06\xb3\xa3\x72\x6e\xc2\xf1\x42\x5a\x5d\xef\xcd\x6f\x76\x76\x84\x00\xfa\xa9\xd2\x8c\x06\x39\x9b\x63\xf6\x16\x84\x53\x37\x1e\x9c\xc6\x56\xc5\xf8\x74\x38\xc3\x68\xf7\x71\xe7\x38\x7a\xb7\xa9\x67\xe0\x52\x22\x9c\x6d\x54\x73\x19\x2e\x5a\x98\x89\xbf\xb9\x84\x24\xa5\x0f\x22\xc5\x25\x86\x6f\x41\x08\x3b\xfa\x3a\x2c\x48\x7c\x1a\x70\xf6\xa8\x51\xcb\xa4\x63\xa6\xdc\x6f\x2b\xfc\x99\x9a\xa5\xcc\xcc\xa3\x40\x87\x9e\x33\xee\x0e\x47\x75\xa4\x9d\x8a\x56\x00\x37\x4c\xc6\x0a\xda\x07\xa8\xba\xcf\x3c\x6c\x71\xf4\x76\x85\xa6\xaa\xc8\xa7\x56\xa0\x6f\xce\xb0\x39\x76\x57\x14\xeb\x01\xf6\x3e\xc4\x71\x03\x0e\xfe\x22\x4e\x8f\xff\x1b\x69\xf7\x63\xf1\x9f\x17\x04\x63\x7f\xbb\xaa\x85\xe4\x08\x3e\xbb\xda\xbb\x95\x6e\x50\x56\x45\x32\xdd\x62\xc9\x6d\x62\x9c\x7f\x77\x14\xa9\x13\xe3\x74\xc2\x9d\xdc\xc6\x61\xf2\x51\xbd\x1c\x4e\x3d\x37\x39\x77\x07\x4e\xdc\x33\xf5\xfd\x39\x5f\xf3\x9c\x67\xf7\xaf\x08\xb7\xdf\xb9\x3c\x9e\x2b\x3f\x5d\xc8\x55\xfe\x43\xa6\x0f\x8a\x27\xb9\x7a\x24\xa0\xc7\x6d\xe8\xa4\x29\xdb\x80\x7b\xf0\xad\xdf\x30\xc6\xd2\x1e\xe1\x79\x22\x9d\x3a\xbd\xfa\x04\x6b\x3b\xe8\x5f\x6a\xc4\xcd\x9a\x37\xf8\x4f\xa1\x7b\xff\xb4\xfa\x8f\x57\x63\x37\x78\x51\x5f\xfb\x41\x7e\xb9\x24\xe3\x49\x80\x34\xb5\x6e\xff\x14\x29\x1b\x81\xa4\x91\x77\x27\x7a\x8a\x30\xec\x56\x74\xa3\xf0\xcb\x0b\x66\xed\x71\x67\x47\x72\x81\x97\x4c\x9c\xc8\x76\x89\x89\xe5\xd6\x28\xba\xf0\x09\x98\xf9\x6b\x60\x38\xe3\xed\xb2\x22\x96\x55\x23\x77\x9d\x44\xf1\x2c\xf7\x17\x4a\x80\x84\x57\x96\xda\x25\x13\xc4\x9c\x18\x51\xac\x2c\xb8\x28\xc5\x2a\xc7\x6b\x14\xdf\x44\xf1\x8e\x79\xac\xcb\x3f\x0e\xf2\xb8\x16\x63\xdc\xfc\xf6\x90\x6c\x51\xe3\xc2\xc4\x21\xe9\x5e\x3d\x1d\x9b\xfd\x6d\x11\x25\x56\x7b\xe3\xae\x56\x6a\x62\x5e\xa4\xb9\xca\xaa\x9a\xce\xef\xd5\xe2\x2b\x82\xfe\xa5\x60\x80\xb8\x92\x05\x15\x30\xf7\xa3\x1a\x3e\x4c\xee\x37\xbd\x78\xdf\xd0\x89\xc0\xbb\xc0\x0f\xf9\xac\xbd\xf5\x16\xd0\xe9\x5e\xf7\xbf\x24\x51\xa3\x5e\x92\x3e\x2b\xf7\x84\xb6\xe1\x2d\x5b\x7e\x81\x16\x61\xd5\x19\xb5\xd0\x6a\xbe\x75\xd6\xd4\xac\xa3\x31\xc2\xf4\xf1\x9e\xc4\xe4\x8f\xcf\x7d\xd7\xb7\x0f\x84\x7a\x47\x5c\xa9\xe1\xb5\x2f\x39\xf5\x29\x91\xfa\xf5\x9d\x93\x83\x2e\x57\xfc\xea\x07\x50\xb8\x55\xb8\x41\xd4\xc4\x94\x7b\x9d\xd3\xef\x22\x44\xf7\x27\x97\xc1\x9f\x24\x0f\x8d\xc1\xee\xcc\x37\xfd\x50\x12\x2d\xce\xcf\x25\x25\xae\x76\x5b\x16\x34\x9d\x49\xad\x70\x03\x31\xde\xa8\x14\xd3\xb3\xe3\xfd\xe2\x9c\x65\xf1\x07\x50\x53\x80\x6a\x2c\xe1\x37\x01\x95\x4a\x7a\xc3\x3d\x28\xcb\xf5\x82\xf2\xd9\x81\x02\x1d\xbd\x25\x59\x79\x69\xd1\x4c\x5c\x04\xd1\x09\xbe\xfd\x4c\x25\x11\xd2\x2b\x5a\xcb\x86\x78\x40\xcd\x32\x2f\xb3\x94\x76\xc9\x42\x8a\x35\xca\x74\xf5\xf5\x8a\x5d\x4f\xe3\x67\xab\xd6\xdd\x04\xfd\xaf\x22\xe1\x47\x81\x27\x0b\xa8\x36\xaf\x38\x70\x27\x1f\xf1\x6a\xd0\xb9\xbc\x3c\x71\x4d\xaa\xd5\xf8\x3b\x00\x00\xff\xff\x4c\x74\xa8\xa1\xb3\x12\x00\x00")

func bambooScriptsConsumeLuaBytes() ([]byte, error) {
	return bindataRead(
		_bambooScriptsConsumeLua,
		"bamboo-scripts/consume.lua",
	)
}

func bambooScriptsConsumeLua() (*asset, error) {
	bytes, err := bambooScriptsConsumeLuaBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bamboo-scripts/consume.lua", size: 4787, mode: os.FileMode(420), modTime: time.Unix(1448244061, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bambooScriptsEnqueueLua = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x55\x51\x73\x1a\x37\x10\x7e\xe7\x57\xec\xdc\x4c\x27\xc7\x14\x5f\x43\xfa\x66\x8c\x67\x48\xb9\x71\x48\x6c\x9c\x02\x71\xdb\x78\x3c\x8c\xe0\x16\x90\x7d\xe8\xae\x92\x70\x4a\x3b\xfd\xef\xdd\x95\x4e\xc7\x41\xd2\x76\x12\x5e\x38\xad\x56\xfb\xad\xbe\xfd\x76\x75\x76\x76\x7f\xdf\x3a\x3b\x03\x54\xbf\xef\x70\x87\xfc\xf9\x0e\xf7\xe6\x1c\x2e\x94\xb9\xe4\x15\x28\x5a\x8c\xc5\x16\x4d\x29\x96\x08\x3b\x95\xa1\x86\x4f\x1b\xb9\xdc\x80\x3b\x01\x99\xb0\x02\xf0\x0f\x69\xac\x49\xf8\xc0\x40\xaf\xf9\x78\xa9\x65\xa1\xa5\xdd\x5f\xc2\xc5\x63\xb1\x90\x19\xfd\x3f\x21\xaf\x9e\x45\x7e\x09\xf7\xcd\x45\x92\x24\x0f\x0e\xca\xfd\x68\xa3\x03\x64\x87\x52\x48\x6d\x40\x68\xe4\xd5\x0e\x0d\x68\x2c\x35\x1a\x54\x56\xaa\x35\x08\x78\x5b\x2c\xa0\x58\x3c\xe2\xd2\x32\x2e\x07\x98\xa0\xdd\x69\xce\xf7\x25\xc8\x15\x10\x2c\x88\x5c\xa3\xc8\xf6\x3e\x3f\xcc\x12\xe8\xf2\x8e\xc8\x32\xfa\xe6\x13\xa9\xd6\x85\xa6\x03\xa3\xf1\xdd\xe0\x7a\x34\x9c\xbf\x1f\x4c\x06\x37\xe9\x2c\x9d\x4c\x79\xf7\xe1\xa1\xd5\xca\x8b\x25\xe5\xb2\x52\xc4\x00\xf4\x21\xaa\x78\x8a\x2a\xbb\xc1\x92\xad\xe7\x51\x70\xcc\x8b\xf5\xfc\x93\xd0\x8a\xac\xab\x9d\x5a\x5a\x59\x28\x88\x89\x3c\x23\xd6\xd8\x6e\xf1\xfd\x34\x66\xd2\x24\xe4\x17\xfb\xaf\xeb\xdb\xab\xf9\x2f\x83\xc9\x78\x34\xbe\xea\x40\x74\x11\x11\x1d\x15\x1c\x7d\x44\x97\x6e\x1d\x81\xfb\xab\xe3\xa0\xca\x9a\x80\xaa\xb0\x72\x89\x5f\x07\x39\xbe\x9d\x8d\x7e\x4a\xbf\x15\xf1\x19\xf5\xa2\x30\x5f\x09\x79\x97\x4e\x5e\xdf\x4e\xbf\x09\x53\x9a\x39\x72\xa9\x1a\x80\x14\xd8\xec\x72\x1b\xe0\xb8\xf2\x60\xf7\x25\x06\x3b\xf4\xfb\xf0\xc2\x8a\x45\x8e\x2f\x40\xa8\x0c\xbc\x39\xa1\x30\xcd\xc0\xca\x50\xc8\x77\xe9\x6f\xd3\xfb\x6e\x5d\xec\x20\x5d\xda\xb1\x85\xb1\x9a\xe4\x16\x0f\x26\x57\x77\xe4\xd2\x0e\xf9\x1c\xf9\xa8\xdd\x76\x81\xfa\xd4\xc7\xc9\x9e\x93\xeb\x83\xdb\x79\x45\x00\x24\xaa\xf7\x5a\x6e\x85\xde\x3b\xf9\xfa\x0e\x8a\x3f\x4e\xd1\x86\x53\x4f\xde\x46\x87\x28\x35\x62\x83\x15\xc6\xdc\xfc\xfc\x21\xfd\x90\x0e\xa3\xaa\x41\xa1\x58\x81\xdd\xa0\x0b\xe2\x1a\x30\x7e\x73\x23\xca\x3a\x06\x4b\xff\x34\xc0\xdb\xdb\xd7\xd3\xa8\x61\x70\xe9\x85\x2b\x6f\xcd\xba\x53\x31\xd4\xab\x4c\x42\xaf\x97\xcd\xdb\x39\x2a\x93\x35\x5a\xe5\x2e\xda\x6e\xf7\xdc\x75\x6e\xc4\x13\x52\x33\xba\x5d\xce\x4a\xe4\x79\xa3\x33\xa9\x89\x35\x15\xd9\xa2\x36\x07\x56\xe6\x2e\xe3\x3e\xfc\xf5\x77\xc0\xe2\x76\x79\xd9\x6b\xad\xa8\xc0\x92\x3e\x7f\xec\x78\xf4\xac\x70\xc5\xf5\xc8\x52\x19\xd4\x36\x0e\xe7\x3b\x9e\x54\xf9\x40\x79\xb0\x13\x87\x50\xdf\x77\x7d\x6d\x29\xaf\x19\xb1\xe3\x33\xe7\xac\x68\xa8\xfc\xe0\xa6\x88\x4f\xc8\xb0\xc7\x01\xfa\x4b\x77\x0c\x38\xee\x9e\x34\x33\x62\x05\xdf\xc1\x2b\x16\x55\xb7\xcd\xd4\x2b\x87\x4a\xbc\x71\xff\x8f\x14\x05\xa7\x62\x1f\x00\x1f\xbf\x44\xc1\xb9\x17\x78\x2d\x2a\xe5\xc5\x1b\x66\x46\x4c\xd1\x8e\xe4\xec\x5b\xc7\x09\x7f\x4e\xc3\x2f\xdf\xc7\xd1\xe7\x83\x2a\x3a\x6a\x94\xe5\x4e\x6b\x9a\x90\x73\xb3\x2c\x34\x36\xaf\xe6\x63\x91\x4b\x1e\x47\x7f\xba\xdd\xa8\x53\x89\xad\xe3\xb5\xe0\x6e\xea\xa3\xf8\x71\x4e\xc7\x9b\xa7\xd2\x5f\x47\xd3\xd9\x94\x4f\x91\x7b\x9b\x39\xa9\x83\x7b\x7f\xd7\x72\x5d\xd7\x6c\xc7\x69\xb0\xe5\xd0\x31\x97\xfd\x93\xed\x53\x36\x61\x5c\x58\xff\x20\xf1\xa0\x97\x16\xb7\x24\xdf\x16\xd4\x3f\x56\xf3\x40\xf9\x24\x83\x07\x6c\x84\x71\x1d\x61\x78\xa6\x90\x8e\x72\x9a\x22\x54\x0a\x87\x90\x44\xbd\xff\x26\x9a\xb4\x17\x74\xe3\xf4\x1c\x5a\xab\xaa\x20\x85\x16\x0c\xb0\x81\xad\x28\x93\x56\x93\x94\x37\x37\xd3\x74\x56\x71\xd2\xa1\xd7\x91\x1e\xc9\xa7\x23\xed\xfc\xbb\x73\x14\x18\x21\x4b\xf8\x24\xab\xb1\xc2\x72\x6d\xc2\x53\x93\x45\x55\xa7\x0d\xb2\xcc\x25\x35\x1a\x12\xf1\x7e\x74\xb4\x7c\xcb\xd6\x85\x2a\x3d\xce\xc7\xc1\x70\xd8\xa8\xae\x3c\x44\xf7\x85\xee\x71\xf1\xc2\x48\xad\xe7\x65\x5d\x86\x66\xca\xc3\xf4\x3a\x54\x1c\xdc\x0b\xbb\x2d\x9e\x0f\xfc\xc4\xba\xc8\xf3\x05\x5d\xb9\xdd\xac\x1f\xc3\x43\x51\xa2\x16\xee\x61\x58\x09\x99\xf3\xd3\xeb\x71\x4e\x7b\xa0\x42\xff\x9f\x02\x7d\xde\x09\xce\xc3\x15\xad\x72\xe9\xf6\x5a\xff\x04\x00\x00\xff\xff\xc5\xd9\xa1\x88\xcd\x08\x00\x00")

func bambooScriptsEnqueueLuaBytes() ([]byte, error) {
	return bindataRead(
		_bambooScriptsEnqueueLua,
		"bamboo-scripts/enqueue.lua",
	)
}

func bambooScriptsEnqueueLua() (*asset, error) {
	bytes, err := bambooScriptsEnqueueLuaBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bamboo-scripts/enqueue.lua", size: 2253, mode: os.FileMode(420), modTime: time.Unix(1448244065, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bambooScriptsFailLua = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bambooScriptsFailLuaBytes() ([]byte, error) {
	return bindataRead(
		_bambooScriptsFailLua,
		"bamboo-scripts/fail.lua",
	)
}

func bambooScriptsFailLua() (*asset, error) {
	bytes, err := bambooScriptsFailLuaBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bamboo-scripts/fail.lua", size: 0, mode: os.FileMode(420), modTime: time.Unix(1447644349, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bambooScriptsTestLua = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd2\xd5\x55\x28\x4a\x2d\x29\x2d\xca\x03\x52\x29\x99\xc5\x7a\xa9\x45\x45\xf9\x45\xf1\x45\xa9\x05\x39\x95\x1a\x4a\xbe\x8e\x11\x5e\xfe\x4e\xc1\x4a\x9a\x5c\xe8\xca\x8a\x4b\x12\x4b\x4a\x8b\x61\xea\x6c\x4a\x52\x8b\x4b\xec\x14\x20\x82\x28\xaa\xab\x0d\x6a\x91\x79\x4a\x60\xe3\x95\x74\x14\x94\x92\x4b\x8b\x4b\xf2\x73\x75\xc1\x7c\xdd\xfc\xa4\xac\xd4\xe4\x12\xa5\x5a\x2e\x88\xe1\xc9\x89\x39\x39\x1a\x4a\x51\x8e\x2e\x2e\x20\x95\x21\x56\x81\xa1\xae\xa1\xae\x40\xa6\x21\x90\x97\x59\x92\x9a\x0b\xb4\x01\xc5\x31\x50\xf5\xc1\xce\xfe\x41\xae\xa8\x3a\x60\xca\x01\x01\x00\x00\xff\xff\xb1\xb3\xdb\x89\xe6\x00\x00\x00")

func bambooScriptsTestLuaBytes() ([]byte, error) {
	return bindataRead(
		_bambooScriptsTestLua,
		"bamboo-scripts/test.lua",
	)
}

func bambooScriptsTestLua() (*asset, error) {
	bytes, err := bambooScriptsTestLuaBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bamboo-scripts/test.lua", size: 230, mode: os.FileMode(420), modTime: time.Unix(1448227483, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bamboo-scripts/ack.lua": bambooScriptsAckLua,
	"bamboo-scripts/consume.lua": bambooScriptsConsumeLua,
	"bamboo-scripts/enqueue.lua": bambooScriptsEnqueueLua,
	"bamboo-scripts/fail.lua": bambooScriptsFailLua,
	"bamboo-scripts/test.lua": bambooScriptsTestLua,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bamboo-scripts": &bintree{nil, map[string]*bintree{
		"ack.lua": &bintree{bambooScriptsAckLua, map[string]*bintree{}},
		"consume.lua": &bintree{bambooScriptsConsumeLua, map[string]*bintree{}},
		"enqueue.lua": &bintree{bambooScriptsEnqueueLua, map[string]*bintree{}},
		"fail.lua": &bintree{bambooScriptsFailLua, map[string]*bintree{}},
		"test.lua": &bintree{bambooScriptsTestLua, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

